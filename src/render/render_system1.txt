#include "render_system.h"

RenderSystem::RenderSystem(sf::RenderWindow& window, World& world)
    : window(window), world(world) {
    load_textures();
}

void RenderSystem::load_textures() {
    // 加载纹理
    std::string texture_path = "../../resources/images/";
    sf::Texture character_texture;
    if (!character_texture.loadFromFile(texture_path + "character.png")) {
        exit(1);
    }
    textures[EntityType::CHARACTER] = character_texture;
    
    sf::Texture tree_texture;
    if (!tree_texture.loadFromFile(texture_path + "tree.png")) {
        exit(1);
    }
    textures[EntityType::TREE] = tree_texture;
}

void RenderSystem::render() {
    window.clear(sf::Color(200, 230, 200)); // 浅绿色背景
    
    // 渲染网格线
    const float GRID_SIZE = 32.0f; // 每个格子的像素大小
    for (int i = 0; i <= MAP_SIZE; ++i) {
        sf::RectangleShape line(sf::Vector2f(MAP_SIZE * GRID_SIZE, 1));
        line.setPosition(0, i * GRID_SIZE);
        line.setFillColor(sf::Color(150, 150, 150, 100));
        window.draw(line);
        
        line.setSize(sf::Vector2f(1, MAP_SIZE * GRID_SIZE));
        line.setPosition(i * GRID_SIZE, 0);
        window.draw(line);
    }
    
    for (auto entity : world.entity_manager.get_all_entities()) {
        render_character(entity);
        render_tree(entity);
    }
    
    window.display();
}

void RenderSystem::render_character(Entity entity) {
    auto& loc = world.component_manager.get_component<locationComponent>(entity);
    
    sf::Sprite sprite;
    sprite.setTexture(textures[EntityType::CHARACTER]);
    sprite.setPosition(loc.locX * 32.0f, loc.locY * 32.0f);
    window.draw(sprite);
}

void RenderSystem::render_tree(Entity entity) {
    auto& loc = world.component_manager.get_component<locationComponent>(entity);
    
    sf::Sprite sprite;
    sprite.setTexture(textures[EntityType::TREE]);
    sprite.setPosition(loc.locX * 32.0f, loc.locY * 32.0f);
    window.draw(sprite);
}