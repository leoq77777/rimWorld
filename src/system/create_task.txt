#include <type_traits>

// 假设 Task 和 Action 结构体已经定义好
struct Task {
    TaskType type;
    location target_location;
    int priority;
    Action target_action;
};

struct Action {
    ActionType action_type;
    location target_loc;
    float duration;
    Entity target_entity;

    // 构造函数简化初始化
    Action(ActionType at, location loc, float dur, Entity ent)
        : action_type(at), target_loc(loc), duration(dur), target_entity(ent) {}
};

// 创建任务的模板函数
template<TaskType TASK_TYPE, ActionType ACTION_TYPE, int PRIORITY, float DURATION>
Task create_task(Entity entity, ComponentManager& component_manager) {
    auto& pos = component_manager.get_component<LocationComponent>(entity).loc;

    return Task{
        .type = TASK_TYPE,
        .target_location = pos,
        .priority = PRIORITY,
        .target_action = Action(ACTION_TYPE, pos, DURATION, entity)
    };
}

// 使用示例：定义具体任务类型的别名（可选）
using ChopTask = decltype(create_task<TaskType::CHOP, ActionType::CHOP, 1, 5.0>);
using CollectTask = decltype(create_task<TaskType::COLLECT, ActionType::COLLECT, 2, 1.0>);
using PlaceTask = decltype(create_task<TaskType::PLACE, ActionType::PLACE, 3, 1.0>);
using AllocateTask = decltype(create_task<TaskType::ALLOCATE, ActionType::ALLOCATE, 4, 1.0>);
using BuildTask = decltype(create_task<TaskType::BUILD, ActionType::BUILD, 5, 5.0>);

// 简化的任务创建函数
Task idle_task(Entity entity, ComponentManager& component_manager) {
    return create_task<TaskType::IDLE, ActionType::WANDER, 0, 0.0>(entity, component_manager);
}

Task chop_task(Entity entity, ComponentManager& component_manager) {
    return create_task<TaskType::CHOP, ActionType::CHOP, 1, 5.0>(entity, component_manager);
}

Task collect_task(Entity entity, ComponentManager& component_manager) {
    return create_task<TaskType::COLLECT, ActionType::COLLECT, 2, 1.0>(entity, component_manager);
}

Task place_task(Entity entity, ComponentManager& component_manager) {
    return create_task<TaskType::PLACE, ActionType::PLACE, 3, 1.0>(entity, component_manager);
}

Task allocate_task(Entity entity, ComponentManager& component_manager) {
    return create_task<TaskType::ALLOCATE, ActionType::ALLOCATE, 4, 1.0>(entity, component_manager);
}

Task build_task(Entity entity, ComponentManager& component_manager) {
    return create_task<TaskType::BUILD, ActionType::BUILD, 5, 5.0>(entity, component_manager);
}